{
	"info": {
		"_postman_id": "245e1ffa-4f39-4d36-9b02-5cb0d4bd2b39",
		"name": "Newman Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26107109"
	},
	"item": [
		{
			"name": "report/get-report-prohibited-items Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verify response is successful\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response time is reasonable\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test 3: Verify response structure\r",
							"pm.test(\"Response has required structure\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('_verify');\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"});\r",
							"\r",
							"// Test 4: Verify _verify field is boolean\r",
							"pm.test(\"_verify field is boolean\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._verify).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Test 5: Verify data is an array\r",
							"pm.test(\"Data is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"// Test 6: If data exists, verify structure of each item\r",
							"pm.test(\"Data items have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.data && jsonData.data.length > 0) {\r",
							"        jsonData.data.forEach(item => {\r",
							"            pm.expect(item).to.have.property('asin');\r",
							"            pm.expect(item).to.have.property('countrycode');\r",
							"            pm.expect(item).to.have.property('description');\r",
							"            pm.expect(item).to.have.property('hscode');\r",
							"            pm.expect(item).to.have.property('iqty');\r",
							"            pm.expect(item).to.have.property('last_status_description');\r",
							"            pm.expect(item).to.have.property('tracking_id');\r",
							"            pm.expect(item).to.have.property('trck_nmr_fol');\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify data types are correct\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.data && jsonData.data.length > 0) {\r",
							"        const firstItem = jsonData.data[0];\r",
							"        pm.expect(firstItem.asin).to.be.a('string');\r",
							"        pm.expect(firstItem.countrycode).to.be.a('string');\r",
							"        pm.expect(firstItem.description).to.be.a('string');\r",
							"        pm.expect(firstItem.hscode).to.be.a('string');\r",
							"        pm.expect(firstItem.iqty).to.be.a('string');\r",
							"        pm.expect(firstItem.last_status_description).to.be.a('string');\r",
							"        pm.expect(firstItem.tracking_id).to.be.a('string');\r",
							"        pm.expect(firstItem.trck_nmr_fol).to.be.a('number');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_info\": {\r\n        \"user_code\": 1693,\r\n        \"user_key\": \"ok\",\r\n        \"app_key\": \"ok\"\r\n    },\r\n    \"tracking_id_list\": [\"28886100\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.skypostal.com/wcf-services/service-report.svc/report/get-report-prohibited-items",
					"protocol": "https",
					"host": [
						"api",
						"skypostal",
						"com"
					],
					"path": [
						"wcf-services",
						"service-report.svc",
						"report",
						"get-report-prohibited-items"
					]
				}
			},
			"response": []
		},
		{
			"name": "finance/rpt-get-additional-invoice-header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verify response is successful\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response structure\r",
							"pm.test(\"Response has required structure\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('_verify');\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"});\r",
							"\r",
							"// Test 3: Verify _verify field is boolean\r",
							"pm.test(\"_verify field is boolean\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._verify).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Test 4: Verify data is an array\r",
							"pm.test(\"Data is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test 5: If data exists, verify structure of each invoice item\r",
							"pm.test(\"Invoice items have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.data && jsonData.data.length > 0) {\r",
							"        jsonData.data.forEach(item => {\r",
							"            pm.expect(item).to.have.property('copa_name');\r",
							"            pm.expect(item).to.have.property('country_iso_code');\r",
							"            pm.expect(item).to.have.property('creation_date');\r",
							"            pm.expect(item).to.have.property('invoice_id');\r",
							"            pm.expect(item).to.have.property('items');\r",
							"            pm.expect(item).to.have.property('sent_to_qb');\r",
							"            pm.expect(item).to.have.property('status_event');\r",
							"            pm.expect(item).to.have.property('total');\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 6: Verify data types are correct\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.data && jsonData.data.length > 0) {\r",
							"        const firstItem = jsonData.data[0];\r",
							"        pm.expect(firstItem.copa_name).to.be.a('string');\r",
							"        pm.expect(firstItem.country_iso_code).to.be.a('string');\r",
							"        pm.expect(firstItem.creation_date).to.be.a('string');\r",
							"        pm.expect(firstItem.invoice_id).to.be.a('number');\r",
							"        pm.expect(firstItem.items).to.be.a('string');\r",
							"        pm.expect(firstItem.sent_to_qb).to.be.a('number');\r",
							"        pm.expect(firstItem.status_event).to.be.a('string');\r",
							"        pm.expect(firstItem.total).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify country code format\r",
							"pm.test(\"Country ISO code has correct format\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.data && jsonData.data.length > 0) {\r",
							"        jsonData.data.forEach(item => {\r",
							"            pm.expect(item.country_iso_code).to.have.lengthOf(2);\r",
							"            pm.expect(item.country_iso_code).to.match(/^[A-Z]{2}$/);\r",
							"        });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_info\": {\r\n        \"user_code\": 1,\r\n        \"user_key\": \"S1sBGU484ZUAa5OUEN39ix0LZ8Ob3q7A\"\r\n    },\r\n    \"start_date\": \"/Date(1740849957000)/\",\r\n    \"end_date\": \"/Date(1742923557000)/\",\r\n    \"copa_id\": 0,\r\n    \"additional_charge\": null,\r\n    \"country_iso_code\": null,\r\n    \"tracking_list\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.skypostal.com/wcf-services/service-finance.svc/finance/rpt-get-additional-invoice-header",
					"protocol": "https",
					"host": [
						"api",
						"skypostal",
						"com"
					],
					"path": [
						"wcf-services",
						"service-finance.svc",
						"finance",
						"rpt-get-additional-invoice-header"
					]
				}
			},
			"response": []
		}
	]
}